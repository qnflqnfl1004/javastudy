package study;

public class lambda5 {
  /*
   * 람다를 사용하면 안되는 경우
   * 
   * - 익명클래스의 this는 익명클래스 자신을 가리키지만 람다에서의 this는 선언된 클래스를 가리킨다.
   * - 람다는 은닉 변수(Shadow Variable)을 허용하지 않는다.
   *   익명 클래스는 변수를 선언하여 사용할 수 있지만 람다는 이를 허용하지 않습니다.
   * - 람다는 인터페이스에 반드시 하나의 메서드만 가지고 있어야 한다.
   *   인터페이스에 @FunctionalInterface 어노테이션을 붙이면 두개 이상의 추상 메서드가
   *   선언되었을 경우 컴파일 에러를 발생시킨다.
   */
  
  public static void main(String[] args) {
    lambda5 lambda5 = new lambda5();
    lambda5.ShadowWithLambda();
    lambda5.ShadowWithAnonymous();
  }
  
  /*
   * 섀도우 변수는 람다식에서 외부 변수와 이름이 같은 변수를 선언하는 경우,
   * 람다식 내부에서는 외부 변수가 아닌 해당 변수를 참조하게 되는 현상을 의미합니다.
   */
  
  // 람다식
  
  /*
   * ShadowWithLambda() 메소드 내부에서 num 변수를 1로 초기화하고,
   * 람다식 내부에서 다시 2로 초기화했습니다.
   * 람다식 내부에서 참조하는 num은 2가 되어야 하지만 에러가 납니다.
   */
  public void ShadowWithLambda() {
    int num = 1;
    Runnable r = () -> {
//      int num = 2; // error!
      System.out.println(num);
    };
    r.run();
  }
  
  // 익명클래스
  /* 반면에 익명 클래스는 내부 스코프에 존재하는 변수 num을 잡아내는 것을 볼 수 있습니다. */
  public void ShadowWithAnonymous() {
    int num = 1;
    Runnable r = new Runnable() {
      
      @Override
      public void run() {
        int num = 2;
        System.out.println(num); // 2
      }
    };
    r.run();
  }
}
