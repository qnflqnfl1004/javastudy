package study;

public class lambda4 {
  /*
   * 람다를 사용하면 안되는 경우
   * 
   * - 익명클래스의 this는 익명클래스 자신을 가리키지만 람다에서의 this는 선언된 클래스를 가리킨다.
   * - 람다는 은닉 변수(Shadow Variable)을 허용하지 않는다.
   *   익명 클래스는 변수를 선언하여 사용할 수 있지만 람다는 이를 허용하지 않습니다.
   * - 람다는 인터페이스에 반드시 하나의 메서드만 가지고 있어야 한다.
   *   인터페이스에 @FunctionalInterface 어노테이션을 붙이면 두개 이상의 추상 메서드가
   *   선언되었을 경우 컴파일 에러를 발생시킨다.
   */

  public static void main(String[] args) {
    lambda4 lambda4 = new lambda4();
    lambda4.printWithLambda();
    lambda4.printWithAnonymous();
    
  }
  
  // 람다식
  // printWithLambda에서 두곳에서 this를 호출하고 있는데 모두 같은 인스턴스를 가리키고 있다.
  public void printWithLambda() {
    System.out.println(this);   //lambda4@49e4cb85
    Runnable r = () -> System.out.println(this); //lambda4@49e4cb85
    r.run();
  }
  
  // 익명클래스
  // 반면에 printWithAnonymous는 두 개의 this가 다른 인스턴스를 가리키고 있다. 
  // 익명클래스의 this는 익명클래스 자신을 가리키지만 람다에서의 this는 선언된 클래스를 가리키는 것을 알 수 있다.
  public void printWithAnonymous() {
    System.out.println(this);   //lambda4@49e4cb85
    Runnable r = new Runnable() {

      @Override
      public void run() {
        System.out.println(this);   //lambda4$1@5594a1b5
      }
      
    };
    r.run();
  }

}

